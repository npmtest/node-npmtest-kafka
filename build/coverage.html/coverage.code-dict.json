{"/home/travis/build/npmtest/node-npmtest-kafka/test.js":"/* istanbul instrument in package npmtest_kafka */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-kafka/lib.npmtest_kafka.js":"/* istanbul instrument in package npmtest_kafka */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_kafka = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_kafka = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-kafka/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-kafka && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_kafka */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_kafka\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_kafka.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_kafka.rollup.js'] =\n            local.assetsDict['/assets.npmtest_kafka.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_kafka.__dirname + '/lib.npmtest_kafka.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/kafka.js":"module.exports = {\n\tProducer: require('./lib/Producer'),\n\tConsumer: require('./lib/Consumer'),\n\tClient: require('./lib/Client'),\n\terror: require('./lib/error')\n}\n\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/Producer.js":"var std = require('std'),\n\tConnection = require('./Connection'),\n\trequestTypes = require('./requestTypes')\n\nmodule.exports = std.Class(Connection, function(supr) {\n\t\n\tthis._magicValue = 0\n\tthis._requestType = requestTypes.PRODUCE\n\t\n\tvar defaults = {\n\t\ttopic: 'test',\n\t\tpartition: 0\n\t}\n\n\tthis.init = function(opts) {\n\t\tsupr(this, 'init', arguments)\n\t\topts = std.extend(opts, defaults)\n\t\tthis._partition = opts.partition\n\t\tthis._topic = opts.topic\n\t}\n\n\tthis.send = function(messages, topic, partition) {\n\t\tif (typeof topic == 'undefined') { topic = this._topic }\n\t\tif (typeof partition == 'undefined') { partition = this._partition }\n\t\tif (!(messages instanceof Array)) { messages = [messages] }\n\t\tthis._connection.write(this._encodeRequest(topic, partition, messages))\n\t\treturn this\n\t}\n\n\tthis._encodeRequest = function(topic, partition, messages) {\n\t\tvar encodedMessages = ''\n\t\tfor (var i=0; i<messages.length; i++) {\n\t\t\tvar encodedMessage = this._encodeMessage(messages[i])\n\t\t\tencodedMessages += std.pack('N', encodedMessage.length) + encodedMessage\n\t\t}\n\n\t\tvar request = std.pack('n', this._requestType)\n\t\t\t+ std.pack('n', topic.length) + topic\n\t\t\t+ std.pack('N', partition)\n\t\t\t+ std.pack('N', encodedMessages.length) + encodedMessages\n\t\t\n\t\treturn this._bufferPacket(std.pack('N', request.length) + request)\n\t}\n\n\tthis._encodeMessage = function(message) {\n\t\treturn std.pack('CN', this._magicValue, std.crc32(message)) + message\n\t}\n})\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/Connection.js":"var std = require('std'),\n\tnet = require('net'),\n\tevents = require('events')\n\nmodule.exports = std.Class(events.EventEmitter, function() {\n\n\tvar defaults = {\n\t\thost: 'localhost',\n\t\tport: 9092\n\t}\n\n\tthis.init = function(opts) {\n\t\topts = std.extend(opts, defaults)\n\t\tthis._host = opts.host\n\t\tthis._port = opts.port\n\t}\n\n\tthis.connect = function(callback) {\n\t\tif (this._connection) { throw new Error(\"connect called twice\") }\n\t\tthis._connection = net.createConnection(this._port, this._host)\n\t\tthis._connection.on('connect', std.bind(this, 'emit', 'connect'))\n\t\tthis._connection.on('error', std.bind(this, 'emit', 'error'))\n\t\tif (callback != undefined) this._connection.on('connect', callback)\n\t\treturn this\n\t}\n\n\tthis.close = function() {\n\t\tthis._connection.end()\n\t\tdelete this._connection\n\t\treturn this\n\t}\n\t\n\tthis._bufferPacket = function(packet) {\n\t\tvar len = packet.length,\n\t\t\tbuffer = new Buffer(len)\n\n\t\tfor (var i=0; i<len; i++) {\n\t\t\tbuffer[i] = packet.charCodeAt(i)\n\t\t}\n\n\t\treturn buffer\n\t}\n})\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/requestTypes.js":"module.exports = {\n\tPRODUCE     : 0,\n\tFETCH       : 1,\n\tMULTIFETCH  : 2,\n\tMULTIPRODUCE: 3,\n\tOFFSETS     : 4\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/Consumer.js":"var std = require('std'),\n\tevents = require('events'),\n\tClient = require('./Client'),\n\trequestTypes = require('./requestTypes'),\n\terror = require('./error')\n\nmodule.exports = std.Class(Client, function(supr) {\n\n\tvar defaults = {\n\t\tpollInterval: 2000,\n\t}\n\t\n\tvar subscription_defaults = {\n\t\toffset: 0,\n\t\tpartition: 0,\n\t}\n\n\tthis.init = function(opts) {\n\t\tsupr(this, 'init', arguments)\n\t\topts = std.extend(opts, defaults)\n\t\tthis._pollInterval = opts.pollInterval\n\t\tthis._topics = []\n\t\tthis._outstanding = 0\n\t\tthis._shouldPoll = false\n\t\t\n\t\tthis.on('lastmessage', std.bind(this, '_processLast'))\n\t}\n\t\n\tthis.close = function() {\n\t\tsupr(this, 'close')\n\t\tthis._unschedulePoll()\n\t}\n\n\tthis.subscribeTopic = function(opts) {\n\t\tvar topic = opts.name == undefined ? { name:opts, offset:0, partition: 0 } : std.extend(opts, subscription_defaults)\n\t\tthis._topics.push(topic)\n\t\tif (this._topics.length == 1) this._schedulePoll()\n\t\treturn this\n\t}\n\n\tthis.unsubscribeTopic = function(name) {\n\t\tthis._topics = this._topics.filter(function(x) { return x.name != name })\n\t\tif (this._topics.length == 0) this._unschedulePoll()\n\t\treturn this\n\t}\n\t\n\tthis._pollForMessages = function() {\n\t\tif (this._outstanding > 0 || !this._shouldPoll) return\n\t\tthis._shouldPoll = false\n\n\t\tfor (i in this._topics) {\n\t\t\tthis._outstanding++\n\t\t\tthis.fetchTopic(this._topics[i])\n\t\t}\n\t}\n\t\n\tthis._processLast = function(topic, offset) {\n\t\tfor (i in this._topics) if (this._topics[i].name == topic) {\n\t\t\tthis._topics[i].offset = offset\n\t\t\tthis._outstanding--\n\t\t\tthis._pollForMessages()\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\tthis._schedulePoll = function() {\n\t\tthis._timeoutID = setTimeout(std.bind(this, '_schedulePoll'), this._pollInterval)\n\t\tthis._shouldPoll = true\n\t\tthis._pollForMessages()\n\t}\n\t\n\tthis._unschedulePoll = function() {\n\t\tclearTimeout(this._timeoutID)\n\t\tthis._shouldPoll = false\n\t}\n})\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/Client.js":"var std = require('std'),\n\tevents = require('events'),\n\tConnection = require('./Connection'),\n\trequestTypes = require('./requestTypes'),\n\terror = require('./error')\n\n\t\nmodule.exports = std.Class(Connection, function(supr) {\n\tvar MS_TO_S = 1000\n\t\n\tvar states = {\n\t\tHEADER_LEN_0: 0, HEADER_LEN_1: 1, HEADER_LEN_2: 2, HEADER_LEN_3: 3,\n\t\tHEADER_EC_0: 4, HEADER_EC_1: 5,\n\t\tRESPONSE_MSG_0: 6, RESPONSE_MSG_1: 7, RESPONSE_MSG_2: 8, RESPONSE_MSG_3: 9,\n\t\tRESPONSE_MAGIC: 10,\n\t\tRESPONSE_CHKSUM_0: 11, RESPONSE_CHKSUM_1: 12, RESPONSE_CHKSUM_2: 13, RESPONSE_CHKSUM_3: 14,\n\t\tRESPONSE_MSG: 15,\n\t\t\n\t\tOFFSET_LEN_0: 16, OFFSET_LEN_1: 17, OFFSET_LEN_2: 18, OFFSET_LEN_3: 19,\n\t\tOFFSET_OFFSETS_0: 20, OFFSET_OFFSETS_1: 21, OFFSET_OFFSETS_2: 22, OFFSET_OFFSETS_3: 23,\n\t\tOFFSET_OFFSETS_4: 24, OFFSET_OFFSETS_5: 25, OFFSET_OFFSETS_6: 26, OFFSET_OFFSETS_7: 27,\n\t}\n\t\n\tvar defaults = {\n\t\tmaxSize: 1048576 //1MB\n\t}\n\n\tvar fetch_defaults = {\n\t\ttype: requestTypes.FETCH,\n\t\tnext: states.RESPONSE_MSG_0,\n\t\tlast: 'lastmessage',\n\t\tencode: function (t) {\n\t\t\treturn this._encodeFetchRequest(t)\n\t\t},\n\t\t\n\t\tpartition: 0,\n\t\toffset: 0,\n\t}\n\t\n\tvar offset_defaults = {\n\t\ttype: requestTypes.OFFSETS,\n\t\tnext: states.OFFSET_LEN_0,\n\t\tlast: 'lastoffset',\n\t\tencode: function (t) {\n\t\t\treturn this._encodeOffsetsRequest(t)\n\t\t},\n\n\t\tpartition: 0,\n\t\toffsets: 1,\n\t}\n\n\tthis.init = function(opts) {\n\t\tsupr(this, 'init', arguments)\n\t\topts = std.extend(opts, defaults)\n\t\tthis._buffer = new Buffer(opts.maxSize)\t\t\n\t\tthis._toRead = 0\n\t\tthis._requests = []\n\t\tthis._connected = false\n\t\tthis._state = states.HEADER_LEN_0\n\t\tfetch_defaults.encode = fetch_defaults.encode.bind(this)\n\t\toffset_defaults.encode = offset_defaults.encode.bind(this)\n\t}\n\n\tthis.connect = function() {\n\t\tsupr(this, 'connect', arguments)\n\t\tthis._connection.on('connect', std.bind(this, '_onConnect'))\n\t\treturn this\n\t}\n\t\t\n\tthis.fetchTopic = function(args) {\n\t\tvar request = std.extend(args.name == undefined ? { name: args } : args, fetch_defaults)\n\t\tthis._pushRequest(request)\n\t\treturn this\n\t}\n\t\n\tthis.fetchOffsets = function(args) {\n\t\tvar request = std.extend(args.name == undefined ? { name: args } : args, offset_defaults)\n\t\tthis._pushRequest(request)\n\t\treturn this\n\t}\n\t\n\tthis._onConnect = function() {\n\t\tthis._connected = true\n\t\tthis._connection.on('data', std.bind(this, '_onData'))\n\t\tfor (i in this._requests) this._writeRequest(this._requests[i])\n\t}\n\t\n\tthis._pushRequest = function(request) {\n\t\tthis._requests.push(request)\n\t\tthis._writeRequest(request)\t\t\n\t}\n\t\n\tthis._writeRequest = function(request) {\n\t\tif (this._connected) this._connection.write(request.encode(request))\n\t}\n\n\tthis._encodeFetchRequest = function(t) {\n\t\tvar request = std.pack('n', requestTypes.FETCH)\n\t\t\t+ std.pack('n', t.name.length) + t.name\n\t\t\t+ std.pack('N', t.partition)\n\t\t\t+ std.pack('N2', t.offset & 0xffff0000 >> 32, t.offset & 0x0000ffff)\n\t\t\t+ std.pack('N', this._buffer.length)\n\n\t\tvar requestSize = 2 + 2 + t.name.length + 4 + 8 + 4\n\n\t\treturn this._bufferPacket(std.pack('N', requestSize) + request)\n\t}\n\n\tthis._encodeOffsetsRequest = function(t) {\n\t\tvar time = new Date().getTime() / MS_TO_S\n\t\tvar request = std.pack('n', requestTypes.OFFSETS)\n\t\t\t+ std.pack('n', t.name.length) + t.name\n\t\t\t+ std.pack('N', t.partition)\n\t\t\t+ std.pack('N2', time & 0xffff0000 >> 32, time & 0x0000ffff)\n\t\t\t+ std.pack('N', t.offsets)\n\t\n\t\tvar requestSize = 2 + 2 + t.name.length + 4 + 8 + 4\n\t\treturn this._bufferPacket(std.pack('N', requestSize) + request)\n\t}\n\t\n\tthis._onData = function(buf) {\n/** \n * the following tests buffer sizes smaller than what normally\n * comes off the socket.  It breaks the normal boundaries and helps\n * ensure the parsing code is robust\n *\n\t\tvar buffer = new Buffer(buf.length - 2)\n\t\tbuf.copy(buffer, 0, 0, buf.length - 2)\n\t\tthis._processData(buffer)\n\t\t\t\t\n\t\tbuffer = new Buffer(2)\n\t\tbuf.copy(buffer, 0, buf.length - 2, buf.length)\n\t\tthis._processData(buffer)\n\t}\n\t\n\tthis._processData = function (buf) {\n*/\n\t\tvar index = 0\t\t\n\t\twhile (index != buf.length) {\n\t\t\tvar bytes = 1\n\t\t\tvar next = this._state + 1\n\t\t\tswitch (this._state) {\t\t\t\t\t\n\t\t\t\tcase states.HEADER_LEN_0:\n\t\t\t\t\tthis._totalLen = buf[index] << 24\n\t\t\t\t    break\n\t\t\t\t\n\t\t\t\tcase states.HEADER_LEN_1:\t\t\t\t\n\t\t\t\t    this._totalLen += buf[index] << 16\n\t\t\t\t    break\n\t\t\t\t\t\n\t\t\t\tcase states.HEADER_LEN_2:\t\t\t\t\n\t\t\t\t    this._totalLen += buf[index] << 8\n\t\t\t\t    break\n\n\t\t\t\tcase states.HEADER_LEN_3:\t\t\n\t\t\t\t    this._totalLen += buf[index]\n\t\t\t\t    break\n\t\t\t\t\n\t\t\t\tcase states.HEADER_EC_0:\n\t\t\t\t\tthis._error = buf[index] << 8\n\t\t\t\t\tthis._totalLen--\n\t\t\t\t    break\n\t\t\t\t    \n\t\t\t\tcase states.HEADER_EC_1:\n\t\t\t\t\tthis._error += buf[index]\n\t\t\t\t\tthis._toRead = this._totalLen\n\t\t\t\t\tnext = this._requests[0].next\n\t\t\t\t\tthis._totalLen--\n\t\t\t\t\tif (this._error != error.NoError) this.emit('error', this._error, error[this._error])\n\t\t\t\t    break\n\t\t\t\t\n\t\t\t\tcase states.RESPONSE_MSG_0:\n\t\t\t\t    this._msgLen = buf[index] << 24\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    this._payloadLen = 0\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_MSG_1:\t\t\t\t\n\t\t\t    \tthis._msgLen += buf[index] << 16\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_MSG_2:\t\t\t\t\n\t\t\t    \tthis._msgLen += buf[index] << 8\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_MSG_3:\t\t\t\t\n\t\t\t    \tthis._msgLen += buf[index]\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    break\n\t\t\t\t\n\t\t\t\tcase states.RESPONSE_MAGIC:\t\n\t\t\t    \tthis._magic = buf[index]\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t        this._msgLen--\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_CHKSUM_0:\n\t\t\t    \tthis._chksum = buf[index] << 24\n\t\t\t\t\tthis._requests[0].offset++\n\t\t        \tthis._msgLen--\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_CHKSUM_1:\t\t\t\t\n\t\t\t\t    this._chksum += buf[index] << 16\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t\tthis._msgLen--\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_CHKSUM_2:\t\t\t\t\n\t\t        \tthis._chksum += buf[index] << 8\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    this._msgLen--\n\t\t\t\t    break\n\n\t\t\t\tcase states.RESPONSE_CHKSUM_3:\t\t\t\t\n\t\t        \tthis._chksum += buf[index]\n\t\t\t\t\tthis._requests[0].offset++\n\t\t\t\t    this._msgLen--\n\t\t\t\t    break\n\t\t\t\t\n\t\t\t\tcase states.RESPONSE_MSG:\n\t\t\t\t\tnext = states.RESPONSE_MSG\n\t\t\t\t\t\n\t\t\t\t\t// try to avoid a memcpy if possible\n\t\t\t\t\tvar payload = null\n\t\t\t\t\tif (this._payloadLen == 0 && buf.length - index >= this._msgLen) {\n\t\t\t\t\t\tpayload = buf.toString('utf8', index, index + this._msgLen)\n\t\t\t\t\t\tbytes = this._msgLen\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar end = index + this._msgLen - this._payloadLen\n\t\t\t\t\t\tif (end > buf.length) end = buf.length\n\t\t\t\t\t\tbuf.copy(this._buffer, this._payloadLen, index, end)\n\t\t\t\t\t\tthis._payloadLen += end - index\n\t\t\t\t\t\tbytes = end - index\n\t\t\t\t\t\tif (this._payloadLen == this._msgLen) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpayload = this._buffer.toString('utf8', 0, this._payloadLen)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (payload != null) {\n\t\t\t\t\t\tthis._requests[0].offset += payload.length\n\t\t\t\t\t\tnext = states.RESPONSE_MSG_0\n\t\t\t\t\t\tthis.emit('message', this._requests[0].name, payload, this._requests[0].offset)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_LEN_0: \n\t\t\t\t\tthis._msgLen = buf[index] << 24\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_LEN_1: \n\t\t\t\t\tthis._msgLen += buf[index] << 16\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tcase states.OFFSET_LEN_2:\n\t\t\t\t\tthis._msgLen += buf[index] << 8\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_LEN_3:\n\t\t\t\t\tthis._msgLen += buf[index]\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_0:\n\t\t\t\t\tthis._requests[0].offset = buf[index] << 56\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_1:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 48\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_2:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 40\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_3:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 32\n\t\t\t\t\tbreak\n\n\t\t\t\tcase states.OFFSET_OFFSETS_4:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 24\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_5:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 16\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_6:\n\t\t\t\t\tthis._requests[0].offset += buf[index] << 8\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tcase states.OFFSET_OFFSETS_7:\n\t\t\t\t\tthis._requests[0].offset += buf[index]\t\t\t\n\t\t\t\t\tnext = states.OFFSET_OFFSETS_0\n\t\t\t\t\tthis.emit('offset', this._requests[0].name, this._requests[0].offset)\n\t\t\t}\t\t\t\n\t\t\tindex += bytes\n\t\t\tthis._toRead -= bytes\n\t\t\tthis._state = next\n\t\t\tif (this._toRead == 0) this._last()\n\t\t}\n\t}\t\n\t\n\tthis._last = function() {\n\t\tvar last = this._requests.shift()\n\t\tthis.emit(last.last, last.name, last.offset)\n\t\tthis._state = states.HEADER_LEN_0\n\n\t}\n})\n","/home/travis/build/npmtest/node-npmtest-kafka/node_modules/kafka/lib/error.js":"var each = require('std/each')\n\nmodule.exports = {\n\tNoError: 0,\n\tOffsetOutOfRange: 1,\n\tInvalidMessage: 2,\n\tWrongPartition: 3,\n\tInvalidRetchSize:4\n}\n\neach(['NoError', 'OffsetOutOfRange', 'InvalidMessage', 'WrongPartition', 'InvalidRetchSize'], function(name, codeNum) {\n\tmodule.exports[name] = codeNum\n\tmodule.exports[codeNum] = name\n})\n\n"}